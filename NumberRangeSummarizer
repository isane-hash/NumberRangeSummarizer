
package numberrangesummarizer;

import java.util.List;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.stream.Collector;
import java.util.stream.Collectors;


/**
 * @author Isane
 *
 * Implement this Interface to produce a comma delimited list of numbers,
 * grouping the numbers into a range when they are sequential.
 *
 *
 * Sample Input: "1,3,6,7,8,12,13,14,15,21,22,23,24,31
 * Result: "1, 3, 6-8, 12-15, 21-24, 31"
 *
 * The code will be evaluated on
 *   - functionality
 *   - style
 *   - robustness
 *   - best practices
 *   - unit tests
 */
public interface NumberRangeSummarizer {
    
public static void main(String[] args) {
		
		//test 1
		
		System.out.println("List 1");
		List<Integer> list = Arrays.asList(1,3,6,7,8,12,13,14,15,21,22,23,24,31);
		System.out.println(list.stream().collect(new CollectorSummery()));
		
		//test 2
		System.out.println("List 2");
		List<Integer> list2 = Arrays.asList(1, 2, 4, 5, 6, 12, 13, 14,19);
		System.out.println(list2.stream().collect(new CollectorSummery()));
		
		//test 3
		System.out.println("List 3");
		List<Integer> list3 = Arrays.asList(100, 120, 400, 401, 666, 1222, 1223, 1224,1933);
		System.out.println(list3.stream().collect(new CollectorSummery()));
				
		//test 4
		System.out.println("List 4");
		List<Integer> list4 = Arrays.asList(1, 5, 6, 7, 12, 13, 18,19, 47);
		System.out.println(list4.stream().collect(new CollectorSummery()));
				
	}
		
	
	

}class CollectorSummery implements Collector<Integer, List<String>, List<String>>{

    private int last = 0;
    private LinkedList<Integer> collected_array = new LinkedList<>();

    
    public Supplier<List<String>> supplier(){
        return ArrayList::new;
    }
    public Set<Characteristics> characteristics(){
        return EnumSet.noneOf(Characteristics.class);
    }

    private void setValues( List<String> list ){
        list.addAll(
            collected_array.stream()
                .map(String::valueOf)
                .collect(Collectors.toList())
       );
    }

    public BiConsumer<List<String>, Integer> accumulator(){
        return ( LastList, currentValue ) -> {
            if( currentValue - last == 1 ){ 
                collected_array.add(currentValue);
            } else{
                if( collected_array.size() > 1 ){
                    LastList.add(collected_array.getFirst() + "-" + collected_array.getLast());
                } else{
                    setValues(LastList);
                }
                collected_array.clear();
                collected_array.add(currentValue);
            }
            last = currentValue;
        };
    }

    public BinaryOperator<List<String>> combiner(){
        return (list, list2) -> {
            list.addAll(list2);
            return list;
        };
    }

    
    public Function<List<String>, List<String>> finisher(){
        return ( LastList ) -> {
            if( !collected_array.isEmpty() ){
                setValues(LastList);
            }
            return LastList;
        };
    }


}
